# This is an **example** API to demonstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended

openapi: 3.0.2
info:
  version: '0.5.0' # Your API version
  # It can be any string, but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI requires the version to be a string, but without quotation marks YAML can recognize it as a number.
  
  title: Example.com # Replace with your API title
  # Keep it simple. Don't add "API" or version at the end of the string.

  termsOfService: 'https://example.com/terms/' # [Optional] Replace with URL to your ToS
  license:
    name: GPL 3 
    url: 'http://www.gnu.org/licenses/gpl-3.0.html'
  x-logo:
    ulr: "https://www.gnu.org/graphics/license-logos-by-christian-candena-cc-by.svg"
  
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    a rather mediocre messaging app

externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: "https://github.com/Mano-lemm/scrum"

# A list of tags used by the definition with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: messaging
    description: send messaging between users

servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:

  '/usr/getCode/email':
    parameters:
      - name: req
        in: body
        description: login request information such as email address
        schema:
          type: CreateUserWithEmailReq

    post:
      tags:
        - login
        - user

      summary: try to login by email

      operationId: loginAttempt

      description: |
        Some description of the operation. 
        create new registration with email.
        

    '/usr/checkCode':
      parameters:
        - name: req
          in: body
          description: sort of validation
          schema:
            type: EmailLoginRequest

      get:
        tags:
          - login
          - user
          - validation

        summary: checks user code validity

        operationId: checkUserCode

        description: |
          Some description of the operation. 
          Check user code for validation.  

    'login/usr/email':
      parameters:
        - name: req
          in: body
          description: sort of login attempt
          schema:
            type: EmailLoginRequest

      post:
        tags:
          - login
          - user
          - email
          - attempt

        summary: try login by email and attempt

        operationId: loginAttempt

        description: |
          Some description of the login attempt. 
          This is used to determine whether user is authenticated or not.

    'login/usr/phone':
      parameters:
        - name: req
          in: body
          description: sort of login attempt
          schema:
            type: PhoneLoginRequest

      get:
        tags:
          - login
          - user
          - sms
          - attempt

        summary: try login by sms and attempt

        operationId: loginAttempt

        description: |
          Some description of the login attempt. 
          This is used to determine whether user is authenticated or not. 

    '/usr':
      parameters:
        - name: req
          in: body
          description: read messages sent by User
          schema:
            type: MsgBySmsRequest

      get:
        tags:
          - message
          - user


        summary: read messages sent by User

        operationId: getMessagesSentByUsr

        description: |
          Some description of reading message.
          
          
  
  
  
  
  
  
  
  
  

  '/users/{username}': # path parameter in curly braces

    # parameters list that are used with each operation for this path
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get: # documentation for GET operation for this path
      tags:
        - User
      
      # summary is up to 120 symbol, but we recommend to be shortest as possible
      summary: Get user by user name
      
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      
      # operationId should be unique across the whole specification
      operationId: getUserByName
      
      # list of parameters for the operation
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean

        
# An object to hold reusable parts that can be used across the definition
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  # Security scheme definitions that can be used across the definition.
  securitySchemes:
    main_auth: # security definition name (you can name it as you want)
      # the following options are specific to oauth2 type
      type: oauth2 # authorization type, one of: oauth2, apiKey, http
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:  # security definition name (you can name it as you want)
      type: apiKey 
      # The following options are specific to apiKey type
      in: header # Where API key will be passed: header or query
      name: api_key # API key parameter name
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
